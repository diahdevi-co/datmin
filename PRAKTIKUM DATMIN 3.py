# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1660GjePKYCodZToRmZSzvVf4Xxq2CMWn
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# --- Load & Preprocessing ---
@st.cache_data
def load_data():
    df = pd.read_csv('covid_19_indonesia_time_series_all (1).csv')
    df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
    df['date'] = pd.to_datetime(df['date'])
    df = df.dropna(subset=['confirmed', 'deaths', 'recovered'])

    # Data terakhir per lokasi
    latest = df.sort_values('date').groupby('location').tail(1).copy()
    latest['cfr'] = latest['deaths'] / latest['confirmed']
    latest['cfr'] = latest['cfr'].replace([np.inf, -np.inf], 0).fillna(0)

    # Label risiko
    latest['risk_level'] = np.where((latest['cfr'] > 0.05) | (latest['confirmed'] > 10000), 'High', 'Low')

    # Tambahkan koordinat dummy jika tidak tersedia
    np.random.seed(42)
    latest['latitude'] = -2 + np.random.rand(len(latest)) * 10
    latest['longitude'] = 100 + np.random.rand(len(latest)) * 20

    return df, latest

df, latest_df = load_data()

st.title("📊 Dashboard Analisis COVID-19 di Indonesia")

# --- Sidebar ---
st.sidebar.title("Navigasi")
menu = st.sidebar.radio("Pilih Halaman", ["Dashboard", "Prediksi Kasus", "Clustering"])

# --- Halaman Dashboard ---
if menu == "Dashboard":
    st.subheader("🗺️ Peta Interaktif Clustering Lokasi")
    scaler = StandardScaler()
    X_cluster = scaler.fit_transform(latest_df[['confirmed', 'deaths', 'recovered', 'population_density']])
    kmeans = KMeans(n_clusters=3, random_state=42, n_init='auto')
    latest_df['cluster'] = kmeans.fit_predict(X_cluster)

    fig_map = px.scatter_mapbox(
        latest_df,
        lat="latitude",
        lon="longitude",
        color="cluster",
        size="confirmed",
        hover_name="location",
        mapbox_style="open-street-map",
        zoom=4,
        title="Peta Clustering COVID-19"
    )
    st.plotly_chart(fig_map)

    st.subheader("📈 Grafik Tren Kasus Harian (Nasional)")
    daily = df.groupby('date')[['confirmed', 'deaths', 'recovered']].sum().diff().fillna(0)
    daily_rolling = daily.rolling(7).mean()

    st.line_chart(daily_rolling)

    st.subheader("⚠️ Ringkasan Risiko Wilayah")
    risk_count = latest_df['risk_level'].value_counts()
    fig_risk, ax = plt.subplots()
    sns.barplot(x=risk_count.index, y=risk_count.values, palette="Set2", ax=ax)
    ax.set_title("Distribusi Risiko Wilayah")
    st.pyplot(fig_risk)

# --- Halaman Prediksi Kasus ---
elif menu == "Prediksi Kasus":
    st.subheader("📊 Prediksi Jumlah Kasus COVID-19")

    features = ['deaths', 'recovered', 'population_density', 'cfr']
    latest_valid = latest_df.dropna(subset=features)
    X = latest_valid[features]
    y = latest_valid['confirmed']

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    st.write(f"**R² Score:** {r2_score(y_test, y_pred):.2f}")
    st.write(f"**MSE:** {mean_squared_error(y_test, y_pred):.2f}")

    st.write("### 🔍 Coba Prediksi Kasus")
    death_input = st.number_input("Jumlah Kematian", min_value=0)
    recovered_input = st.number_input("Jumlah Sembuh", min_value=0)
    density_input = st.number_input("Kepadatan Penduduk", min_value=0.0)
    cfr_input = st.number_input("Tingkat Fatalitas Kasus", min_value=0.0, max_value=1.0)

    if st.button("Prediksi"):
        pred = model.predict([[death_input, recovered_input, density_input, cfr_input]])
        st.success(f"Prediksi jumlah total kasus: {int(pred[0])} kasus")

# --- Halaman Clustering ---
elif menu == "Clustering":
    st.subheader("🔗 Clustering Lokasi Berdasarkan Data COVID-19")
    st.write("Menggunakan metode **KMeans** dengan fitur:")
    st.markdown("- Total Kasus\n- Jumlah Kematian\n- Jumlah Sembuh\n- Densitas Populasi")

    fig_cluster = px.scatter(
        latest_df,
        x='confirmed',
        y='deaths',
        color='cluster',
        hover_name='location',
        size='recovered',
        title='Visualisasi Clustering Lokasi'
    )
    st.plotly_chart(fig_cluster)

    st.write("Contoh Data dengan Label Cluster:")
    st.dataframe(latest_df[['location', 'confirmed', 'deaths', 'recovered', 'population_density', 'cluster']].head(10))